@page "/yieldcurve"

@using System.Web
@using System.Net;
@using Shared.Models;
@using BootstrapBlazor.Components;

<PageTitle>Chart</PageTitle>

@if (_bondRates != null && !_bondRates.Any())
{
	<p>
		<em>Loading...</em>
	</p>

}
else
{
	<h1>Yield Curve as of @_selectedDate</h1>
	<div class="form-group">
		<label for="asOfDateInput">Choose an As Of Date:</label>
		<InputDate id="asOfDateInput" @bind-Value="_selectedDate" class="form-control" @onchange="DateChanged" />
	</div>
	<button class="btn btn-primary" @onclick="GetParRatesAsync">Fetch Par Rates</button>

	<Chart @ref="_lineChart" OnInitAsync="() => OnInit(0.4f, false)" OnAfterRender="OnAfterRender" />

	<table class="table">
		<thead>
			<tr>
				<th>Months</th>
				<th>Par Rate</th>
				<th>Zero Annualized Rate</th>
				<th>Zero Monthly Rate</th>
				<th>Discount Factor</th>
				<th>ln(Discount Factor)</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var rate in _bondRates ?? new List<BondRate>())
			{
				<tr>
					<td>@rate.Maturity</td>
					<td>@rate.Rate.ToString("P4")</td>
					<td>@rate.AnnualizedZeroRate.ToString("P5")</td>
					<td>@rate.MonthlyZeroRate.ToString("P5")</td>
					<td>@rate.DiscountFactor.ToString("F5")</td>
					<td>@rate.LogOfDiscountFactor.ToString("F5")</td>
				</tr>
			}
		</tbody>
	</table>
}
@code {
	public NavigationManager NavManager { get; set; }
	public IHttpClientFactory ClientFactory { get; set; }

	public ILogger<YieldCurve> Logger { get; set; }

	public YieldCurve(NavigationManager navManager, IHttpClientFactory clientFactory,
		ILogger<YieldCurve> logger) : base()
	{
		NavManager = navManager ?? throw new ArgumentNullException(nameof(navManager));
		ClientFactory = clientFactory ?? throw new ArgumentNullException(nameof(clientFactory));
		Logger = logger ?? throw new ArgumentNullException(nameof(logger));
	}

	public IEnumerable<BondRate>? _bondRates;
	private HttpClient? _httpClient;
	private DateTime _selectedDate = DateTime.Today.AddDays(-1);
	private int _lineDataCount = 40;

	private Chart _lineChart = default!;

	private ConsoleLogger _logger = default!;

	private ConsoleLogger _loggerTooltip = default!;

	private readonly CancellationTokenSource _cancellationTokenSource = new();

	private readonly ChartPointStyle[] chartPointStyles =
				[
			ChartPointStyle.Circle,
					ChartPointStyle.Cross,
					ChartPointStyle.CrossRot,
					ChartPointStyle.Dash,
					ChartPointStyle.Line,
					ChartPointStyle.Rect,
					ChartPointStyle.RectRounded,
					ChartPointStyle.RectRot,
					ChartPointStyle.Star,
					ChartPointStyle.Triangle,
	];

	protected override async Task OnInitializedAsync()
	{
		if (_selectedDate.DayOfWeek == DayOfWeek.Saturday)
		{
			_selectedDate = _selectedDate.AddDays(-1);
		}
		else if (_selectedDate.DayOfWeek == DayOfWeek.Sunday)
		{
			_selectedDate = _selectedDate.AddDays(-2);
		}

		await GetParRatesAsync();
	}

	protected Uri GetBondRatesUri()
	{
		var uri = new UriBuilder($"{NavManager.BaseUri}bondrates");
		var query = HttpUtility.ParseQueryString(uri.Query);
		query["asOfDate"] = _selectedDate.ToShortDateString();
		uri.Query = query.ToString();
		return uri.Uri;
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);

		if (firstRender)
		{
			Task.Run(async () =>
			{
				while (!_cancellationTokenSource.IsCancellationRequested)
				{
					try
					{
						await Task.Delay(2000, _cancellationTokenSource.Token);

						await _lineChart.Reload();
					}
					catch (OperationCanceledException) { }
				}
			});
		}
	}

	private async Task DateChanged()
	{
		if (_selectedDate.DayOfWeek == DayOfWeek.Saturday)
		{
			_selectedDate = _selectedDate.AddDays(-1);
		}
		else if (_selectedDate.DayOfWeek == DayOfWeek.Sunday)
		{
			_selectedDate = _selectedDate.AddDays(-2);
		}

		await GetParRatesAsync();
		_lineChart.Reload();
	}

	private async Task GetParRatesAsync()
	{
		try
		{
			Uri uri = GetBondRatesUri();

			if (_httpClient == null)
			{
				_httpClient ??= ClientFactory?.CreateClient("TreasuryRatesApi") ??
					throw new NullReferenceException($"The client factory could not create an http client.");

				_httpClient.BaseAddress = new Uri($"{uri.Scheme}://{uri.Host}:{uri.Port}/");
			}

			_bondRates = await _httpClient.GetFromJsonAsync<IEnumerable<BondRate>>(uri.PathAndQuery);

			StateHasChanged();
		}
		catch (HttpRequestException httpex)
		{
			switch (httpex.StatusCode)
			{
				case HttpStatusCode.NotFound:
					Logger.LogError("There was no data for the date {date} found: {httpex}", _selectedDate, httpex);
					break;
				default:
					Logger.LogError("There was an error with your request: {httpex}", httpex);
					break;
			}
		}
		catch (Exception ex)
		{
			Logger.LogError("Error encountered when attempting to retrieve bond rates from the backend {ex}", ex);
		}
	}

	private async Task<ChartDataSource> OnInit(float tension, bool hasNull)
	{

		return UpdateChart(tension, hasNull);
	}

	private ChartDataSource UpdateChart(float tension, bool hasNull)
	{
		var ds = new ChartDataSource();
		ds.Options.Title = "Line Chart";
		ds.Options.LegendLabelsFontSize = 16;
		ds.Options.X.Title = "Tenors";
		ds.Options.Y.Title = "Rates";
		ds.Options.XScalesBorderColor = "red";
		ds.Options.YScalesBorderColor = "red";

		ds.Options.XScalesGridColor = "blue";
		ds.Options.XScalesGridTickColor = "blue";
		ds.Options.XScalesGridBorderColor = "blue";

		ds.Options.YScalesGridColor = "blue";
		ds.Options.YScalesGridTickColor = "blue";
		ds.Options.YScalesGridBorderColor = "blue";

		ds.Labels = Enumerable.Range(1, _lineDataCount).Select(i => i.ToString());

		var parValues = new object[361];
		var zeroValues = new object[361];

		foreach (var bond in _bondRates ?? new List<BondRate>())
		{
			if (bond.Rate > 0.0m)
			{
				parValues[bond.Maturity] = bond.Rate * 100;
				zeroValues[bond.Maturity] = bond.AnnualizedZeroRate * 100;
			}
		}

		ds.Data.Add(new ChartDataset()
			{
				BorderWidth = 5,
				Tension = tension,
				Label = $"Par Rates",
				Data = parValues.AsEnumerable<object>(),
				ShowPointStyle = true,
				PointStyle = ChartPointStyle.Cross,
				PointRadius = 5,
				PointHoverRadius = 10,
			});

		ds.Data.Add(new ChartDataset()
			{
				BorderWidth = 3,
				Tension = tension,
				Label = $"Zero Rates",
				Data = zeroValues.AsEnumerable<object>(),
				ShowPointStyle = true,
				PointStyle = ChartPointStyle.Circle,
				PointRadius = 8,
				PointHoverRadius = 15
			});

		return ds;
	}
}

